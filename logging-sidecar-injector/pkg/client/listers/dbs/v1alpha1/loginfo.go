/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/bwei/logging-sidecar-injector/pkg/apis/dbs/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LogInfoLister helps list LogInfos.
// All objects returned here must be treated as read-only.
type LogInfoLister interface {
	// List lists all LogInfos in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LogInfo, err error)
	// LogInfos returns an object that can list and get LogInfos.
	LogInfos(namespace string) LogInfoNamespaceLister
	LogInfoListerExpansion
}

// logInfoLister implements the LogInfoLister interface.
type logInfoLister struct {
	indexer cache.Indexer
}

// NewLogInfoLister returns a new LogInfoLister.
func NewLogInfoLister(indexer cache.Indexer) LogInfoLister {
	return &logInfoLister{indexer: indexer}
}

// List lists all LogInfos in the indexer.
func (s *logInfoLister) List(selector labels.Selector) (ret []*v1alpha1.LogInfo, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LogInfo))
	})
	return ret, err
}

// LogInfos returns an object that can list and get LogInfos.
func (s *logInfoLister) LogInfos(namespace string) LogInfoNamespaceLister {
	return logInfoNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LogInfoNamespaceLister helps list and get LogInfos.
// All objects returned here must be treated as read-only.
type LogInfoNamespaceLister interface {
	// List lists all LogInfos in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LogInfo, err error)
	// Get retrieves the LogInfo from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.LogInfo, error)
	LogInfoNamespaceListerExpansion
}

// logInfoNamespaceLister implements the LogInfoNamespaceLister
// interface.
type logInfoNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LogInfos in the indexer for a given namespace.
func (s logInfoNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LogInfo, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LogInfo))
	})
	return ret, err
}

// Get retrieves the LogInfo from the indexer for a given namespace and name.
func (s logInfoNamespaceLister) Get(name string) (*v1alpha1.LogInfo, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("loginfo"), name)
	}
	return obj.(*v1alpha1.LogInfo), nil
}
